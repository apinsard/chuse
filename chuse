#!/usr/bin/python3
# Distributed under the terms of the GNU General Public License v2

"""Portage USE flags manager.
Chuse stands for CHange USE. This is a Portage tool for managing your local USE
flags (ie. set within /etc/portage/package.use).

In constrast to several equivalents, it is designed with a very specific goal:
Make your `/etc/portage/package.use` easier. This means chuse does not handle
other `package.*` and focuses on `package.use`.
"""


import os
import re
import sys
from datetime import datetime
from shutil import rmtree


__author__ = "Antoine Pinsard"
__copyright__ = "Copyright (C) 2015 Antoine Pinsard"
__credits__ = ["Antoine Pinsard"]
__license__ = "GPL-2"
__version__ = "1.0.1"
__maintainer__ = "Antoine Pinsard"
__email__ = "antoine.pinsard@gmail.com"
__status__ = "Production"


class AtomError(Exception):
    """Error related to an atom."""
    pass


class PackageUseError(Exception):
    """Error related to package.use hierarchy."""

    def __init__(self, message=None):
        if not message:
            message = ("Incompatible package.use hierarchy. Please run:\n"
                       "    chuse --dump > ~/package.use.bak && chuse --load"
                       "~/package.use.bak\n"
                       "Or set PACKAGE_USE_FILE_PATTERN environment variable"
                       "(see man chuse(1)).")
        self.message = message


VERBOSITY_QUIET = -1
VERBOSITY_OUTPUT = 0
VERBOSITY_ERROR = 1
VERBOSITY_WARNING = 2
VERBOSITY_DEBUG = 3

VERBOSITY = VERBOSITY_WARNING

PACKAGE_USE_FILE_PATTERN = os.environ.get(
    'PACKAGE_USE_FILE_PATTERN',
    '/etc/portage/package.use/%(cat)s/%(pkg)s')

USE_FLAG_MODIFIERS = '+-%'

DATETIME_FORMAT = "[%Y-%m-%dT%H:%M]"

COLORS = True


def usage():
    uinfo = ("chuse <atom> [[modifier]<flag> ...] [--because <reason>]\n"
             "    Alter use flags.\n"
             "chuse <atom>\n"
             "    Print current flags set and history.\n"
             "chuse (-h|--help)\n"
             "    Print this help."
             "chuse (-v|--version)\n"
             "    Print version information.\n"
             "chuse --dump\n"
             "    Print all contents of /etc/portage/package.use\n"
             "chuse --load <file>\n"
             "    Load a backup file to the /etc/portage/package.use "
             "hierarchy.\n\n"
             "atom:\n"
             "    [version-selector]<ebuild-cat>/<ebuil-pkg>[-<version>]"
             "[:<slot>]\n"
             "    Obviously, 'version-selector' and 'version' should never be "
             "set without the other.\n"
             "version-selector:\n"
             "    One of: =, >, <, >=, <=.\n"
             "ebuild-cat:\n"
             "    An ebuild category (validity won't be checked)\n"
             "ebuild-pkg:\n"
             "    An ebuild package (validity won't be checked)\n"
             "version:\n"
             "    A version of the underlying package (validity won't be "
             "checked).\n"
             "slot:\n"
             "    A slot of the underlying package (validity won't be "
             "checked).\n"
             "modifier:\n"
             "    One of: +, -, %. (% means reset default). If omitted, "
             "+ is assumed.\n"
             "flag:\n"
             "    A USE flag (validity won't be checked).\n"
             "reason:\n"
             "    The reason why you changed these US flags (so that you "
             "remember why you set this\n"
             "    and if you can reset default in the future for instance.\n"
             )
    sys.stdout.write(uinfo)


def version_info():
    webpage = "https://github.com/apinsard/chuse"
    vinfo = ("Chuse version %(version)s, %(copyright)s\n"
             "Chuse comes with ABSOLUTELY NO WARRANTY\n"
             "This is free software, and you are welcome to redistribute it\n"
             "under certain conditions.\n"
             "See %(webpage)s for details.\n") % {
                'version': __version__,
                'copyright': __copyright__,
                'webpage': webpage,
             }
    sys.stdout.write(vinfo)


def _colorize(text, color_code, bold=False):
    if not COLORS:
        return text

    start = "\033["
    if bold:
        start += "1;"
    start += str(color_code)+"m"

    end = "\033[0m"

    return start + text + end


def _red(text, bold=False):
    return _colorize(text, 31, bold)


def _yellow(text, bold=False):
    return _colorize(text, 33, bold)


def _purple(text, bold=False):
    return _colorize(text, 35, bold)


def output(message):
    if VERBOSITY >= VERBOSITY_OUTPUT:
        sys.stdout.write("%s\n" % message)


def error(message):
    if VERBOSITY >= VERBOSITY_ERROR:
        sys.stderr.write(_red("Error: %s\n" % message, bold=True))
    sys.exit(1)


def warning(message):
    if VERBOSITY >= VERBOSITY_WARNING:
        sys.stderr.write(_yellow("Warning: %s\n" % message))


def debug(message):
    if VERBOSITY >= VERBOSITY_DEBUG:
        sys.stdout.write(_purple("Debug: %s\n" % message))


def confirm(message):
    return input(message + " [y/N] ").upper() == 'Y'


def parse_atom(atom: "A raw atom as a string") -> "The atom parts as a dict":
    """Parse the given atom and split it to extract:

        - the version selector ;
        - the category name ;
        - the package name ;
        - the version ;
        - the slot.
    """
    parts = ['selector', 'cat', 'pkg', 'version', 'slot']
    selector_ptrn = r'(?P<selector>>=|<=|<|=|>)'
    cat_ptrn = r'(?P<cat>[a-z0-9]+(-[a-z0-9]+)?)'
    pkg_ptrn = r'(?P<pkg>[a-z0-9]+(-[a-z0-9]+)*)'
    version_ptrn = r'(?P<version>[0-9]+(\.[0-9]+)*(-r[0-9]+)?)'
    slot_ptrn = r'(?P<slot>.*)'

    pattern = '^' + selector_ptrn + '?' + cat_ptrn + '/' + pkg_ptrn + \
        '(-' + version_ptrn + ')?(:' + slot_ptrn + ')?$'

    match = re.match(pattern, atom)

    if not match:
        raise AtomError("Invalid atom!")

    result = {'raw': atom}
    for part in parts:
        result[part] = match.group(part)

    return result


def read_current_flags(atom: "An atom as a dict (parsed with `parse_atom`)"
                       )-> ("The current flags set by the user for this atom "
                            "as a list of tuples"):
    """Look for existing flags formerly set by the user in:

        /etc/portage/package.use

    USE flags are returned as a list of 2-uples in the form:

        ('+'|'-', 'flagname')

    Eg. [('+', 'python'), ('-', 'php')]
    """
    useflags = []

    try:
        """Fetch a line that matches the given atom"""
        with open(PACKAGE_USE_FILE_PATTERN % atom) as f:
            pattern = re.compile('^' + atom['raw'] + r'\s+([^\s].*)$')
            for line in f.readlines():
                match = pattern.match(line)
                if match:
                    raw_flags = re.sub(r'\s+', ' ', match.group(1))
                    for flag in raw_flags.split():
                        if flag[0] == '-':
                            useflags.append(('-', flag[1:]))
                        else:
                            useflags.append(('+', flag))
                    break  # Another matching line would be foolish
    except FileNotFoundError:
        pass  # Then there is no flag for now
    except NotADirectory:
        raise PackageUseError()

    return useflags


def write_changes(atom: "An atom as a dict (parsed with `parse_atom`)",
                  flags: ("The USE flags to write (generated with "
                          "`merge_flags`)"),
                  comment: "A comment about the changes made"):
    """Write USE flag changes to package.use """
    new_line = re.sub('(^\s*)', '# ', comment, flags=re.MULTILINE)

    new_line += "\n" + atom['raw']
    for name, mod in flags.items():
        if mod == '+':
            new_line += " " + name
        else:
            new_line += " " + mod + name

    file_lines = []
    found_existing_atom = False

    filename = PACKAGE_USE_FILE_PATTERN % atom

    try:
        with open(filename) as f:
            pattern = re.compile('^' + atom['raw'] + r'\s+([^\s].*)$')
            for line in f.readlines():
                if pattern.match(line):
                    file_lines.append(new_line)
                    found_existing_atom = True
                else:
                    file_lines.append(line)
    except FileNotFoundError:
        # Then it will be new and we should create possible parent dirs
        try:
            os.makedirs(os.path.dirname(filename))
        except FileExistsError:
            pass  # Then we don't need to create it
    except NotADirectory:
        raise PackageUseError()

    if not found_existing_atom:
        file_lines.append(new_line)

    # Concatenate lines
    file_contents = ""
    for line in file_lines:
        line = line.strip('\n')
        if line != '':
            line += '\n'
            if line[0] != '#':
                line += '\n'
        file_contents += line

    with open(filename, 'w') as f:
        f.write(file_contents)


def merge_flags(cur_flags: "list of current flags",
                new_flags: "list flags to edit"
                )-> ("Current flags \"patched\" with new ones as a dict "
                     "{flag_name: modifier}"):
    """Merge current flags with new ones."""
    useflags = {}
    verbose_changes = []

    for flag in cur_flags:
        useflags[flag[1]] = flag[0]

    for flag in new_flags:
        if flag[0] == '%':
            try:
                del useflags[flag[1]]
            except KeyError:
                warning(("You did not formerly set the %s use flag. No action "
                         "needed") % flag[1])
            else:
                verbose_changes.append("Reset " + flag[1])
        else:
            useflags[flag[1]] = flag[0]
            if flag[0] == '+':
                verbose_changes.append("Set " + flag[1])
            else:
                verbose_changes.append("Unset " + flag[1])

    return useflags, ', '.join(verbose_changes)


def dump(node: "A file or a folder to browse"
         )-> ("The content of the file or the concatenation of dumps of the "
              "folder's children"):
    """Concatenate package.use hierarchy."""
    contents = ''
    if os.path.isdir(node):
        for child in os.listdir(node):
            contents += dump(os.path.join(node, child))
    else:
        with open(node) as f:
            contents = f.read()
    return contents


def load(filename: "The name of a file containing the backup rules to import"):
    """Load a backup package.use file to /etc/portage/package.use."""
    warning("This operation will need to remove anything within "
            "/etc/portage/package.use in order to load the new data.")
    if not confirm("Would you actually like to truncate your package.use?"):
        error("Process cancelled")

    try:
        try:
            os.remove("/etc/portage/package.use")
        except IsADirectoryError:
            rmtree('/etc/portage/package.use')
    except PermissionError:
        error("You are not root!")
    except FileNotFoundError:
        pass  # OK, that's fine then :)

    with open(filename, 'r') as f:
        comments = []
        for line in f.readlines():
            if (line.strip() == ''):
                pass
            elif line[0] == '#':
                comments.append(line[1:])
            else:
                parts = line.split()
                atom = parse_atom(parts[0])
                flags = []
                i = 1
                try:
                    while parts[i] != '#':
                        flag = parts[i]
                        if flag[0] not in USE_FLAG_MODIFIERS:
                            flag = USE_FLAG_MODIFIERS[0] + flag

                        modifier = flag[0]
                        flag = (modifier, flag[1:])

                        flags.append(flag)
                        i += 1
                except IndexError:
                    pass  # No comment
                else:
                    comments.append(' '.join(parts[i+1:]))

                new_flags = merge_flags([], flags)[0]
                try:
                    write_changes(atom, new_flags, '\n'.join(comments))
                except PackageUseError as e:
                    error(e.message)
                except PermissionError:
                    error("You are not root!")
                comments = []


def main():
    try:
        atom = sys.argv[1]
    except IndexError:
        usage()
        error("Expected at least one argument!")

    if atom in ['--version', '-v']:
        version_info()
        sys.exit(0)

    if atom in ['--help', '-h']:
        version_info()
        sys.stdout.write("\n")
        usage()
        sys.exit(0)

    if atom == '--dump':
        output(dump('/etc/portage/package.use'))
        sys.exit(0)

    if atom == '--load':
        try:
            filename = sys.argv[2]
        except IndexError:
            usage()
            error("Option --load expects a filename as second argument")
        load(filename)
        sys.exit(0)

    reason = None
    flags = []

    iarg = 2
    try:
        while sys.argv[iarg] != '--because':
            flag = sys.argv[iarg]
            if flag[0] not in USE_FLAG_MODIFIERS:
                flag = USE_FLAG_MODIFIERS[0] + flag

            modifier = flag[0]
            flag = (modifier, flag[1:])

            flags.append(flag)
            iarg += 1
    except IndexError:
        pass  # No reason given
    else:
        reason = ' '.join(sys.argv[iarg+1:]) or "Because I can!"

    try:
        atom = parse_atom(atom)
    except AtomError as e:
        error(e.message)

    try:
        cur_flags = read_current_flags(atom)
    except PackageUseError as e:
        error(e.message)

    if flags:
        new_flags, comment = merge_flags(cur_flags, flags)

        comment = datetime.today().strftime(DATETIME_FORMAT) + ' ' + comment
        if reason:
            comment += '\n' + reason

        try:
            write_changes(atom, new_flags, comment)
        except PackageUseError as e:
            error(e.message)
        except PermissionError:
            error("You are not root!")
    else:
        try:
            with open(PACKAGE_USE_FILE_PATTERN % atom) as f:
                for line in f.readlines():
                    line = line[:-1]
                    if line != '' and line[0] == '#':
                        line = _purple(line)
                    output(line)
        except FileNotFoundError:
            output("No flag currently defined for %s" % atom['raw'])


if __name__ == '__main__':
    main()
