#!/usr/bin/python3
# Distributed under the terms of the GNU General Public License v2

"""Portage USE flags manager.
Chuse stands for CHange USE. This is a Portage tool for managing your local USE
flags (ie. set within /etc/portage/package.use).

In constrast to several equivalents, it is designed with a very specific goal:
Make your `/etc/portage/package.use` easier. This means chuse does not handle
other `package.*` and focuses on `package.use`.
"""


from configparser import ConfigParser
from datetime import datetime
import os
import re
from shutil import rmtree
import sys

from appi.atom import QueryAtom, AtomError


__author__ = "Antoine Pinsard"
__copyright__ = "Copyright (C) 2017 Antoine Pinsard"
__credits__ = ["Antoine Pinsard"]
__license__ = "GPL-2"
__version__ = "1.1"
__maintainer__ = "Antoine Pinsard"
__email__ = "antoine.pinsard@gmail.com"
__status__ = "Production"


class PackageUseError(Exception):
    """Error related to package.use hierarchy."""

    def __init__(self, message=None):
        if not message:
            message = ("Incompatible package.use hierarchy. Please run:\n"
                       "    chuse --dump > ~/package.use.bak && chuse --load"
                       "~/package.use.bak\n"
                       "Or set PACKAGE_USE_FILE_PATTERN environment variable"
                       "(see man chuse(1)).")
        self.message = message


VERBOSITY_QUIET = -1
VERBOSITY_OUTPUT = 0
VERBOSITY_ERROR = 1
VERBOSITY_WARNING = 2
VERBOSITY_DEBUG = 3

VERBOSITY = VERBOSITY_WARNING

PACKAGE_USE_FILE_PATTERN = os.environ.get('PACKAGE_USE_FILE_PATTERN')
if not PACKAGE_USE_FILE_PATTERN:
    config = ConfigParser()
    config.read('/etc/chuse.conf')
    if 'package.use' in config:
        PACKAGE_USE_FILE_PATTERN = config['package.use'].get('file-pattern')
if not PACKAGE_USE_FILE_PATTERN:
    PACKAGE_USE_FILE_PATTERN = '/etc/portage/package.use/{cat}/{pkg}'

USE_FLAG_MODIFIERS = '+-%'

DATETIME_FORMAT = "[%Y-%m-%dT%H:%M]"

COLORS = True


def usage():
    uinfo = (
        "chuse [-f|--force] <atom> [[modifier]<flag> ...] [--because <reason>]\n"
         "    Alter use flags. By default, if the given atom doesn't match any existing ebuild,\n"
         "    an error will be raised. Use -f/--force option to disable this behavior. If no flag\n"
         "    is specified, the current rules matching the underlying atom will be displayed.\n"
         "chuse <atom>\n"
         "    Print current flags set and history.\n"
         "chuse (-h|--help)\n"
         "    Print this help."
         "chuse (-v|--version)\n"
         "    Print version information.\n"
         "chuse --dump\n"
         "    Print all contents of /etc/portage/package.use\n"
         "chuse --load <file>\n"
         "    Load a backup file to the /etc/portage/package.use hierarchy.\n\n"
         "atom:\n"
         "    A valid package atom.\n"
         "modifier:\n"
         "    One of: +, -, %. (% means reset default). If omitted, + is assumed.\n"
         "flag:\n"
         "    A USE flag (validity won't be checked).\n"
         "reason:\n"
         "    The reason why you changed these US flags (so that you remember why you set this\n"
         "    and if you can reset default in the future for instance.\n"
    )
    sys.stdout.write(uinfo)


def version_info():
    webpage = "https://github.com/apinsard/chuse"
    vinfo = ("Chuse version %(version)s, %(copyright)s\n"
             "Chuse comes with ABSOLUTELY NO WARRANTY\n"
             "This is free software, and you are welcome to redistribute it\n"
             "under certain conditions.\n"
             "See %(webpage)s for details.\n") % {
                'version': __version__,
                'copyright': __copyright__,
                'webpage': webpage,
             }
    sys.stdout.write(vinfo)


def _colorize(text, color_code, bold=False):
    if not COLORS:
        return text

    start = "\033["
    if bold:
        start += "1;"
    start += str(color_code)+"m"

    end = "\033[0m"

    return start + text + end


def _red(text, bold=False):
    return _colorize(text, 31, bold)


def _green(text, bold=False):
    return _colorize(text, 32, bold)


def _yellow(text, bold=False):
    return _colorize(text, 33, bold)


def _blue(text, bold=False):
    return _colorize(text, 34, bold)


def _purple(text, bold=False):
    return _colorize(text, 35, bold)


def output(message):
    if VERBOSITY >= VERBOSITY_OUTPUT:
        sys.stdout.write("{}\n".format(message))


def error(message):
    if VERBOSITY >= VERBOSITY_ERROR:
        sys.stderr.write(_red("Error: {}\n".format(message), bold=True))
    sys.exit(1)


def warning(message):
    if VERBOSITY >= VERBOSITY_WARNING:
        sys.stderr.write(_yellow("Warning: {}\n".format(message)))


def debug(message):
    if VERBOSITY >= VERBOSITY_DEBUG:
        sys.stdout.write(_purple("Debug: {}\n".format(message)))


def confirm(message):
    return input(message + " [y/N] ").upper() == 'Y'


def get_filename(atom):
    return PACKAGE_USE_FILE_PATTERN.format(cat=atom.category, pkg=atom.package)


def read_current_flags(atom):
    """Look for existing flags formerly set by the user in:

        /etc/portage/package.use

    USE flags are returned as a list of 2-uples in the form:

        ('+'|'-', 'flagname')

    Eg. [('+', 'python'), ('-', 'php')]
    """
    useflags = []

    try:
        """Fetch a line that matches the given atom"""
        with open(get_filename(atom)) as f:
            pattern = re.compile(r'^{}\s+([^\s].*)$'.format(re.escape(str(atom))))
            for line in f.readlines():
                match = pattern.match(line)
                if match:
                    raw_flags = re.sub(r'\s+', ' ', match.group(1))
                    for flag in raw_flags.split():
                        if flag[0] == '-':
                            useflags.append(('-', flag[1:]))
                        else:
                            useflags.append(('+', flag))
                    break  # Another matching line would be foolish
    except FileNotFoundError:
        pass  # Then there is no flag for now
    except NotADirectory:
        raise PackageUseError()

    return useflags


def write_changes(atom, flags, comment):
    """Write USE flag changes to package.use """
    new_line = re.sub('(^\s*)', '# ', comment, flags=re.MULTILINE)

    if flags:
        new_line += "\n{}".format(atom)
    else:
        new_line += "\n# EMPTY: {}".format(atom)
    for name, mod in flags.items():
        if mod == '+':
            new_line += " " + name
        else:
            new_line += " " + mod + name

    file_lines = []
    found_existing_atom = False

    filename = get_filename(atom)

    try:
        with open(filename) as f:
            pattern = re.compile(r'^({atom}\s+|# EMPTY:\s{atom}$)'.format(
                atom=re.escape(str(atom))))
            for line in f.readlines():
                if pattern.match(line):
                    file_lines.append(new_line)
                    found_existing_atom = True
                else:
                    file_lines.append(line)
    except FileNotFoundError:
        # Then it will be new and we should create possible parent dirs
        try:
            os.makedirs(os.path.dirname(filename))
        except FileExistsError:
            pass  # Then we don't need to create it
    except NotADirectory:
        raise PackageUseError()

    if not found_existing_atom:
        file_lines.append(new_line)

    # Concatenate lines
    file_contents = ""
    for line in file_lines:
        line = line.strip('\n')
        if line != '':
            line += '\n'
            if line[0] != '#':
                line += '\n'
        file_contents += line

    with open(filename, 'w') as f:
        f.write(file_contents)


def merge_flags(cur_flags, new_flags):
    """Merge current flags with new ones."""
    useflags = {}
    verbose_changes = []

    for flag in cur_flags:
        useflags[flag[1]] = flag[0]

    for flag in new_flags:
        if flag[0] == '%':
            try:
                del useflags[flag[1]]
            except KeyError:
                warning(
                    "You did not formerly set the {} use flag. No action needed".format(flag[1]))
            else:
                verbose_changes.append("Reset " + flag[1])
        else:
            useflags[flag[1]] = flag[0]
            if flag[0] == '+':
                verbose_changes.append("Set " + flag[1])
            else:
                verbose_changes.append("Unset " + flag[1])

    return useflags, ', '.join(verbose_changes)


def dump(node):
    """Concatenate package.use hierarchy."""
    contents = ''
    if os.path.isdir(node):
        for child in os.listdir(node):
            contents += dump(os.path.join(node, child))
    else:
        with open(node) as f:
            contents = f.read()
    return contents


def load(filename):
    """Load a backup package.use file to /etc/portage/package.use."""
    warning("This operation will need to remove anything within "
            "/etc/portage/package.use in order to load the new data.")
    if not confirm("Would you actually like to truncate your package.use?"):
        error("Process cancelled")

    try:
        try:
            os.remove("/etc/portage/package.use")
        except IsADirectoryError:
            rmtree('/etc/portage/package.use')
    except PermissionError:
        error("You are not root!")
    except FileNotFoundError:
        pass  # OK, that's fine then :)

    with open(filename, 'r') as f:
        comments = []
        for line in f.readlines():
            if (line.strip() == ''):
                pass
            elif line[0] == '#':
                comments.append(line[1:])
            else:
                parts = line.split()
                try:
                    atom = QueryAtom(parts[0])
                except AtomError as e:
                    error(e)
                flags = []
                i = 1
                try:
                    while parts[i] != '#':
                        flag = parts[i]
                        if flag[0] not in USE_FLAG_MODIFIERS:
                            flag = USE_FLAG_MODIFIERS[0] + flag

                        modifier = flag[0]
                        flag = (modifier, flag[1:])

                        flags.append(flag)
                        i += 1
                except IndexError:
                    pass  # No comment
                else:
                    comments.append(' '.join(parts[i+1:]))

                new_flags = merge_flags([], flags)[0]
                try:
                    write_changes(atom, new_flags, '\n'.join(comments))
                except PackageUseError as e:
                    error(e.message)
                except PermissionError:
                    error("You are not root!")
                comments = []


def main():
    try:
        atom = sys.argv[1]
    except IndexError:
        usage()
        error("Expected at least one argument!")

    if atom in ['--version', '-v']:
        version_info()
        sys.exit(0)

    if atom in ['--help', '-h']:
        version_info()
        sys.stdout.write("\n")
        usage()
        sys.exit(0)

    if atom == '--dump':
        output(dump('/etc/portage/package.use'))
        sys.exit(0)

    if atom == '--load':
        try:
            filename = sys.argv[2]
        except IndexError:
            usage()
            error("Option --load expects a filename as second argument")
        load(filename)
        sys.exit(0)

    reason = None
    flags = []
    iarg = 2

    force = atom in ['-f', '--force']
    if force:
        atom = sys.argv[iarg]
        iarg += 1

    try:
        while sys.argv[iarg] != '--because':
            flag = sys.argv[iarg]
            if flag[0] not in USE_FLAG_MODIFIERS:
                flag = USE_FLAG_MODIFIERS[0] + flag

            modifier = flag[0]
            flag = (modifier, flag[1:])

            flags.append(flag)
            iarg += 1
    except IndexError:
        pass  # No reason given
    else:
        reason = ' '.join(sys.argv[iarg+1:]) or "Because I can!"

    try:
        atom = QueryAtom(atom, strict=False)
    except AtomError as e:
        error(e)

    matching_ebuilds = atom.list_matching_ebuilds()
    if not matching_ebuilds and not force:
        error("This atom does not match any existing ebuild. Use --force "
              "option to proceed anyway.")
    if not atom.category:
        categories = set(e.category for e in matching_ebuilds)
        if len(categories) != 1:
            error("This atom is ambiguous, please specify the package category")
        atom.category = categories.pop()

    try:
        cur_flags = read_current_flags(atom)
    except PackageUseError as e:
        error(e.message)

    if flags:
        new_flags, comment = merge_flags(cur_flags, flags)

        comment = datetime.today().strftime(DATETIME_FORMAT) + ' ' + comment
        if reason:
            comment += '\n' + reason

        try:
            write_changes(atom, new_flags, comment)
        except PackageUseError as e:
            error(e.message)
        except PermissionError:
            error("You are not root!")
    else:
        try:
            with open(get_filename(atom)) as f:
                for line in f.readlines():
                    line = line[:-1]
                    if line != '' and line[0] == '#':
                        line = _purple(line)
                    else:
                        parts = line.split(' ')
                        line = ' '.join(
                            [_green(parts[0], True)] +
                            [_red(p, True) for p in parts[1:] if p[0] != '-'] +
                            [_blue(p, True) for p in parts[1:] if p[0] == '-']
                        )
                    output(line)
        except FileNotFoundError:
            output("No flag currently defined for {}".format(atom))


if __name__ == '__main__':
    main()
